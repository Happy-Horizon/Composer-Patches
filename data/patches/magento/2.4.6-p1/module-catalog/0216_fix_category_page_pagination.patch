diff --git a/vendor/magento/module-catalog/Model/Layer.php b/vendor/magento/module-catalog/Model/Layer.php
index fb94e82..957acb6 100644
--- a/vendor/magento/module-catalog/Model/Layer.php
+++ b/vendor/magento/module-catalog/Model/Layer.php
@@ -1,20 +1,25 @@
 <?php
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
 namespace Magento\Catalog\Model;
 
 use Magento\Catalog\Api\CategoryRepositoryInterface;
 use Magento\Framework\Exception\NoSuchEntityException;
 use Magento\Catalog\Model\ResourceModel\Product\Attribute\CollectionFactory as AttributeCollectionFactory;
+use Magento\Catalog\Helper\Product\ProductList;
+use Magento\Framework\App\Http\Context;
+use Magento\Framework\App\RequestInterface;
+use Magento\Framework\DB\Select;
+use Magento\Framework\App\ObjectManager;
 
 /**
  * Catalog view layer model
  *
  * @api
  * @SuppressWarnings(PHPMD.LongVariable)
  * @SuppressWarnings(PHPMD.CouplingBetweenObjects)
  * @since 100.0.2
  */
 class Layer extends \Magento\Framework\DataObject
@@ -82,48 +87,71 @@ class Layer extends \Magento\Framework\DataObject
      * @var \Magento\Catalog\Model\Layer\Category\CollectionFilter
      */
     protected $collectionFilter;
 
     /**
      * @var CategoryRepositoryInterface
      */
     protected $categoryRepository;
 
     /**
+     * @var CollectionFactory
+     */
+    protected $collectionFactory;
+
+    /**
+     * @var ProductList
+     */
+    protected $productListHelper;
+
+    /**
+     * @var RequestInterface
+     */
+    protected $request;
+
+    /**
+     * Layer constructor.
      * @param Layer\ContextInterface $context
      * @param Layer\StateFactory $layerStateFactory
      * @param AttributeCollectionFactory $attributeCollectionFactory
-     * @param \Magento\Catalog\Model\ResourceModel\Product $catalogProduct
+     * @param ResourceModel\Product $catalogProduct
      * @param \Magento\Store\Model\StoreManagerInterface $storeManager
      * @param \Magento\Framework\Registry $registry
      * @param CategoryRepositoryInterface $categoryRepository
      * @param array $data
+     * @param CollectionFactory $collectionFactory
+     * @param ProductList $productListHelper
+     * @param RequestInterface $request
      */
     public function __construct(
         \Magento\Catalog\Model\Layer\ContextInterface $context,
         \Magento\Catalog\Model\Layer\StateFactory $layerStateFactory,
         AttributeCollectionFactory $attributeCollectionFactory,
         \Magento\Catalog\Model\ResourceModel\Product $catalogProduct,
         \Magento\Store\Model\StoreManagerInterface $storeManager,
         \Magento\Framework\Registry $registry,
         CategoryRepositoryInterface $categoryRepository,
-        array $data = []
+        array $data = [],
+        ProductList $productListHelper = null,
+        RequestInterface $request = null
     ) {
         $this->_layerStateFactory = $layerStateFactory;
         $this->_attributeCollectionFactory = $attributeCollectionFactory;
         $this->_catalogProduct = $catalogProduct;
         $this->_storeManager = $storeManager;
         $this->registry = $registry;
         $this->categoryRepository = $categoryRepository;
         $this->collectionProvider = $context->getCollectionProvider();
         $this->stateKeyGenerator = $context->getStateKey();
         $this->collectionFilter = $context->getCollectionFilter();
+        $this->productListHelper = $productListHelper ?: ObjectManager::getInstance()->create(ProductList::class);
+        $this->request = $request ?: ObjectManager::getInstance()->create(RequestInterface::class);;
         parent::__construct($data);
     }
 
     /**
      * Get layer state key
      *
      * @return string
      */
     public function getStateKey()
     {
@@ -133,28 +161,47 @@ class Layer extends \Magento\Framework\DataObject
         return $this->_stateKey;
     }
 
     /**
      * Retrieve current layer product collection
      *
      * @return \Magento\Catalog\Model\ResourceModel\Product\Collection
      */
     public function getProductCollection()
     {
+        $page = $this->request->getParam('p')
+            ? $this->request->getParam('p')
+            : 1;
+        $listMode = $this->request->getParam('product_list_mode')
+            ? $this->request->getParam('product_list_mode')
+            : $this->productListHelper->getDefaultViewMode();
+        $listLimit = $this->request->getParam('product_list_limit')
+            ? $this->request->getParam('product_list_limit')
+            : $this->productListHelper->getDefaultLimitPerPageValue($listMode);
+        $listDirection = $this->request->getParam('product_list_dir')
+            ? $this->request->getParam('product_list_dir')
+            : Select::SQL_ASC;
+        $listOrder = $this->request->getParam('product_list_order')
+            ? $this->request->getParam('product_list_order')
+            : $this->productListHelper->getDefaultSortField();
+
         if (isset($this->_productCollections[$this->getCurrentCategory()->getId()])) {
             $collection = $this->_productCollections[$this->getCurrentCategory()->getId()];
         } else {
             $collection = $this->collectionProvider->getCollection($this->getCurrentCategory());
             $this->prepareProductCollection($collection);
             $this->_productCollections[$this->getCurrentCategory()->getId()] = $collection;
         }
 
+        $collection->setOrder($listOrder, $listDirection);
+        $collection->setPage($page, $listLimit);
+
         return $collection;
     }
 
     /**
      * Initialize product collection
      *
      * @param \Magento\Catalog\Model\ResourceModel\Product\Collection $collection
      * @return \Magento\Catalog\Model\Layer
      */
     public function prepareProductCollection($collection)